name: Authentication Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for continuous monitoring
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-node-${{ matrix.node-version }}
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &
        env:
          NODE_ENV: test
          PORT: 6789
          LOGTO_ENDPOINT: ${{ secrets.LOGTO_ENDPOINT }}
          LOGTO_APP_ID: ${{ secrets.LOGTO_APP_ID }}
          LOGTO_APP_SECRET: ${{ secrets.LOGTO_APP_SECRET }}
          LOGTO_RESOURCE_ID: ${{ secrets.LOGTO_RESOURCE_ID }}

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:6789/api/health 2>/dev/null; do sleep 2; done'

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:6789

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/
          retention-days: 3

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run dependency vulnerability check
        run: |
          pnpm dlx audit-ci --config audit-ci.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: audit-results/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &
        env:
          NODE_ENV: production
          PORT: 6789

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:6789/api/health 2>/dev/null; do sleep 2; done'

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse CI completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-scan]
    if: success()
    
    steps:
      - name: Authentication Tests Passed
        run: |
          echo "✅ All authentication tests passed"
          echo "✅ Unit tests: PASSED"
          echo "✅ E2E tests: PASSED" 
          echo "✅ Security scan: PASSED"
          echo ""
          echo "🚀 Deployment gate: APPROVED"
          
      - name: Set deployment status
        run: echo "DEPLOYMENT_APPROVED=true" >> $GITHUB_ENV

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-tests, e2e-tests, security-scan, deployment-gate]
    
    steps:
      - name: Get test results
        run: |
          echo "UNIT_TESTS=${{ needs.unit-tests.result }}" >> $GITHUB_ENV
          echo "E2E_TESTS=${{ needs.e2e-tests.result }}" >> $GITHUB_ENV
          echo "SECURITY_SCAN=${{ needs.security-scan.result }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_GATE=${{ needs.deployment-gate.result }}" >> $GITHUB_ENV

      - name: Create test summary
        run: |
          echo "## Authentication Test Results 🔐" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ env.UNIT_TESTS == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ env.E2E_TESTS == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ env.SECURITY_SCAN == 'success' && '✅ PASSED' || '❌ FAILED' }} | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Gate | ${{ env.DEPLOYMENT_GATE == 'success' && '✅ APPROVED' || '❌ BLOCKED' }} | ${{ needs.deployment-gate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY